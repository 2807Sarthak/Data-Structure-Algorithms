#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;

#define ld              long double
#define mod             1000000007
#define ff              first
#define ss              second
#define int             long long
#define pb              push_back
#define mp              make_pair
#define pii             pair<int,int>
#define vpii            vector<pair<int,int>>
#define fr(i,a,b)     for(int i = a; i < b; i += 1)
#define all(x)          x.begin(),x.end()
#define sz(a)           (int)(a.size())
#define vi              vector<int>
#define mii             map<int,int>
#define pqb             priority_queue<int>
#define pqs             priority_queue<int,vi,greater<int> >
#define setbits(x)      __builtin_popcountll(x)
#define zrobits(x)      __builtin_ctzll(x)
#define inf             1e18
#define ps(x,y)         fixed<<setprecision(y)<<x
#define mk(arr,n,type)  type *arr=new type[n];
#define w(x)            int x; cin>>x; while(x--)
#define pw(b,p)         pow(b,p) + 0.1
#define input(a)      for(auto it = a.begin(); it != a.end(); it++) { int value; cin >> value; *it = value;}
#define print(a)        for(auto it = a.begin() ; it != a.end() ; it++){ cout << *it << " " ;}cout << '\n';
mt19937                 rng(chrono::steady_clock::now().time_since_epoch().count());
 
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
 
#define SS                      stringstream
#define db(...)                 __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1) { cerr << name << " : " << arg1 <<'\n'; }
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args) {
    const char* comma = strchr(names + 1, ',');
    cerr.write(names, comma - names) << " : " << arg1 << " | "; __f(comma + 1, args...);
}
void FASTIO()
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
}

int gcd(int a,int b)
{
	if(a==0)
		return b;
	return gcd(b%a,a);
}



#define MAX_NODES 1005
 
int parent[MAX_NODES];
int size_set[MAX_NODES];

int p2[MAX_NODES];
int se[MAX_NODES];

void make_set(int v)
{
    parent[v] = v;
    size_set[v] = 1;
}

int find_set(int v)
{
    if (v == parent[v])
        return v;
 

    return parent[v] = find_set(parent[v]);
}
 

void union_set(int a, int b)
{
    a = find_set(a);
    b = find_set(b);

    if (a != b) {
 
        // Compare the set sizes
        if (size_set[a] < size_set[b])
            swap(a, b);
 
        // Assign parent of smaller set
        // to the larger one
        parent[b] = a;
 
        // Add the size of smaller set
        // to the larger one
        size_set[a] += size_set[b];
    }
}

void ms(int v)
{
    p2[v] = v;
    se[v] = 1;
}

int fs(int v)
{
    if (v == p2[v])
        return v;
 

    return p2[v] = fs(p2[v]);
}
 

void us(int a, int b)
{
    a = fs(a);
    b = fs(b);

    if (a != b) {
 
        // Compare the set sizes
        if (se[a] < se[b])
            swap(a, b);
 
        // Assign parent of smaller set
        // to the larger one
        p2[b] = a;
 
        // Add the size of smaller set
        // to the larger one
        se[a] += se[b];
    }
}

string check(int a, int b)
{
    a = find_set(a);
    b = find_set(b);
 
    // Check if they have same
    // set representative or not
    return (a == b) ? "Yes" : "No";
}


void solve()
{
	int n,m1,m2;
	cin >> n >> m1 >> m2;
	int x,y;
	fr(i,1,n+1)
	{
		ms(i);
		make_set(i);
	}
	map<pair<int,int>,int> g1,g2;
	fr(i,0,m1)
	{
		cin >> x >> y;
		union_set(x,y);
		g1[mp(x,y)] = 1;
		g1[mp(y,x)] = 1;
	}
	fr(i,0,m2)
	{
		cin >> x >> y;
		us(x,y);
		g2[mp(x,y)] = 1;
		g2[mp(y,x)] = 1;
	}
	vector<pair<int,int>> ans;
	fr(i,1,n+1)
	{
		fr(j,i+1,n+1)
		{
			if(g1[mp(i,j)] || g2[mp(i,j)])
				continue;
			int l1 = find_set(i);
			int l2 = find_set(j);
			int r1 = fs(i);
			int r2 = fs(j);
			if(l1!=l2 && r1!=r2)
			{
				ans.pb(mp(i,j));
				union_set(i,j);
				us(i,j);
			}
		}
	}
	cout << ans.size() << "\n";
	for(auto x:ans)
	{
		cout << x.ff << " " << x.ss << "\n";
	}
}

signed main()
{
   FASTIO();
	{
		solve();
	}    
    return 0;
}
